apply plugin: 'java'
apply from: '../../common.gradle'

def STREAMS_INSTALL = System.getenv("STREAMS_INSTALL")
def WEATHER_TOOLKIT = '../../com.ibm.streamsx.weather'

task buildWeatherToolkit(type: GradleBuild) {
    buildFile = '../../com.ibm.streamsx.weather/build.gradle'
    tasks = ['build']
}

task buildSamples(dependsOn: ['buildWeatherToolkit']) {
    doLast {
        def toolkitPath = WEATHER_TOOLKIT
        compileApp('com.ibm.streamsx.weather.sample', 'LocationServicesGeocodeSample', toolkitPath)
        compileApp('com.ibm.streamsx.weather.sample', 'LocationServicesIATACodeSample', toolkitPath)
        compileApp('com.ibm.streamsx.weather.sample', 'LocationServicesICAOCodeSample', toolkitPath)
        compileApp('com.ibm.streamsx.weather.sample', 'LocationServicesPostalKeySample', toolkitPath)
        compileApp('com.ibm.streamsx.weather.sample', 'LocationServicesSearchSample', toolkitPath)
    }
}

task cleanApps() {
    doLast {
        cleanApp('com.ibm.streamsx.weather.sample', 'LocationServicesGeocodeSample')
        cleanApp('com.ibm.streamsx.weather.sample', 'LocationServicesIATACodeSample')
        cleanApp('com.ibm.streamsx.weather.sample', 'LocationServicesICAOCodeSample')
        cleanApp('com.ibm.streamsx.weather.sample', 'LocationServicesPostalKeySample')
        cleanApp('com.ibm.streamsx.weather.sample', 'LocationServicesSearchSample')
    }
}

build.dependsOn buildSamples
clean.dependsOn cleanApps 
